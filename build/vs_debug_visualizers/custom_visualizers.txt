[Visualizer]

;------------------------------------------------------------------------------
;  boost::shared_ptr Visualizer for Visual Studio 2008(2005)
;
;  by Giovanni Dicanio
;  <giovanni.dicanio@gmail.com>
;
;  2009, January 27th
;
;    *** To be added in [Visualizer] section of autoexp.dat of VS2008 ***
;
;
;  This visualizer is basically the same visualizer written by Stephan 'STL'
;  (Microsoft SDE) for std::tr1::shared_ptr, with very small changes to adapt
;  it to the Boost version of shared_ptr.
;
;  The main task to adapt STL's shared_ptr visualizer to Boost version for me
;  has been to "reverse engineer" Boost shared_ptr, and related classes,
;  trying to properly move in the "maze" of #ifdef's and other stuff in
;  Boost source code.
;
;  This is the result of this "reverse engineering" of boost::shared_ptr:
;
;  boost::shared_ptr has two data members:
;
;     - px : the raw pointer (T*).
;
;     - pn : an instance of boost::detail::shared_count, storing the reference
;            counter block.
;
;  boost::detail::shared_count has a private data member:
;
;     - pi_ : sp_counted_base *
;
;  pi_ is a pointer to a class called sp_counted_base.
;  Following the maze of #ifdef's in Boost source code, it seems that on
;  Win32 platform the sp_counted_base actually used is the one provided in
;  an header file named 'sp_counted_base_w32.hpp'.
;  This class has two private data members:
;
;     long use_count_;
;     long weak_count_;
;
;  So, if $e represents a shared_ptr, to get the strong refs, we can do:
;
;     $e.pn.pi_->use_count_
;
;  and to get the weak refs, we can do:
;
;     $e.pn.pi_->weak_count_
;
;
;------------------------------------------------------------------------------
boost::shared_ptr<*>{
    preview (
        ; shared_ptr<T> stores a T * px .
        #if ($e.px == 0) (
            ; A default-constructed shared_ptr has a null px.
            ; We preview with "empty".
            "empty"
        ) #else (
            ; Raw pointers are previewed with "<pointer value> <object>".
            ; auto_ptr is previewed with "auto_ptr <object>".
            ; Following these examples, shared_ptr is previewed with
            ; "shared_ptr <object> [N strong refs, M weak refs]".
            #(
                "shared_ptr ",
                *$e.px,
                " [",
                $e.pn.pi_->use_count_,
                #if ($e.pn.pi_->use_count_ == 1) (" strong ref") #else (" strong refs"),
                #if ($e.pn.pi_->weak_count_ - 1 > 0) (
                    #(
                        ", ",
                        $e.pn.pi_->weak_count_ - 1,
                        #if ($e.pn.pi_->weak_count_ - 1 == 1) (" weak ref") #else (" weak refs")
                    )
                ),
                "]"
            )
        )
    )

    children (
        #if ($e.px == 0) (
            ; We make empty shared_ptrs (and shared_ptrs that own
            ; the null pointer) appear to have no children.
            #array(expr: 0, size: 0)
        ) #else (
            #(
                ; We make shared_ptr appear to have a single child,
                ; its stored pointer, with a fake name of [ptr].
                #([ptr] : $e.px),

                ; Visualizers can't determine whether a shared_ptr has a custom deleter.
                ; Therefore, we also show the actual members.
                #([actual members] : [$e,!])
            )
        )
    )
}

;------------------------------------------------------------------------------
;  begin boost::unordered

boost::unordered_set<*,*,*,*>{
	preview (
		#(
			"[", $c.table_.size_, "](",
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list(head : $e.next_, next : next_)
			: (*($T1*)(boost::unordered_detail::value_base<$T1> *)(boost::unordered_detail::hash_node<std::allocator<$T1>,boost::unordered_detail::ungrouped> *)&$e)
			, ")"
		)
	)

	children (
		#(
			[raw members]: [$c,!],
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list(head : $e.next_, next : next_)
			: (*($T1*)(boost::unordered_detail::value_base<$T1> *)(boost::unordered_detail::hash_node<std::allocator<$T1>,boost::unordered_detail::ungrouped> *)&$e)
		)
	)
}

boost::unordered_map<*,*,*,*,*>{
	preview (
		#(
			"[", $c.table_.size_, "](",
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list( head : $e.next_, next : next_ )
			: ((std::pair<$T1 const ,$T2> *)(boost::unordered_detail::value_base<std::pair<$T1 const ,$T2> > *)(boost::unordered_detail::hash_node<std::allocator<std::pair<$T1 const ,$T2> >,boost::unordered_detail::ungrouped> *)&$e)
			, ")"
		)
	)

	children (
		#(
			[raw members]: [$c,!],
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list(head : $e.next_, next : next_)
			: ((std::pair<$T1 const ,$T2> *)(boost::unordered_detail::value_base<std::pair<$T1 const ,$T2> > *)(boost::unordered_detail::hash_node<std::allocator<std::pair<$T1 const ,$T2> >,boost::unordered_detail::ungrouped> *)&$e))
		)
	)
}

boost::unordered_multiset<*,*,*,*>{
	preview (
		#(
			"[", $c.table_.size_, "](",
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list(head : $e.next_, next : next_)
			: (*($T1*)(boost::unordered_detail::value_base<$T1> *)(boost::unordered_detail::hash_node<std::allocator<$T1>,boost::unordered_detail::grouped> *)&$e)
			, ")"
		)
	)

	children (
		#(
			[raw members]: [$c,!],
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list(head : $e.next_, next : next_)
			: (*($T1*)(boost::unordered_detail::value_base<$T1> *)(boost::unordered_detail::hash_node<std::allocator<$T1>,boost::unordered_detail::grouped> *)&$e)
		)
	)
}

boost::unordered_multimap<*,*,*,*,*>{
	preview (
		#(
			"[", $c.table_.size_, "](",
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list( head : $e.next_, next : next_ )
			: ((std::pair<$T1 const ,$T2> *)(boost::unordered_detail::value_base<std::pair<$T1 const ,$T2> > *)(boost::unordered_detail::hash_node<std::allocator<std::pair<$T1 const ,$T2> >,boost::unordered_detail::grouped> *)&$e)
			, ")"
		)
	)

	children (
		#(
			[raw members]: [$c,!],
			#array (
				expr : $c.table_.buckets_[$i],
				size : #if($c.table_.size_ == 0)(0) #else ($c.table_.bucket_count_)
			)
			: #list(head : $e.next_, next : next_)
			: ((std::pair<$T1 const ,$T2> *)(boost::unordered_detail::value_base<std::pair<$T1 const ,$T2> > *)(boost::unordered_detail::hash_node<std::allocator<std::pair<$T1 const ,$T2> >,boost::unordered_detail::grouped> *)&$e))
		)
	)
}

; end boost::unorderd
;------------------------------------------------------------------------------


;------------------------------------------------------------------------------
;  boost::basic_regex
;------------------------------------------------------------------------------

boost::basic_regex<*,*>{
	preview
	(
		#(	"regex ",
			$c.m_pimpl.px->m_expression
		 )
	)
	children
	(
		#(
			internals: $c.m_pimpl.px
		)
	)
}

;------------------------------------------------------------------------------
;  boost::variant
;------------------------------------------------------------------------------

boost::variant<*,*,*,*,*,*,*,*,*,*,*> {
   preview (
       #(
           #switch($c.which_)
           #case 0 ( *($T1 *)&($c.storage_.data_) )
           #case 1 ( *($T2 *)&($c.storage_.data_) )
           #case 2 ( *($T3 *)&($c.storage_.data_) )
           #case 3 ( *($T4 *)&($c.storage_.data_) )
           #case 4 ( *($T5 *)&($c.storage_.data_) )
           #case 5 ( *($T6 *)&($c.storage_.data_) )
           #case 6 ( *($T7 *)&($c.storage_.data_) )
           #case 7 ( *($T8 *)&($c.storage_.data_) )
           #case 8 ( *($T9 *)&($c.storage_.data_) )
           #case 9 ( *($T10 *)&($c.storage_.data_) )
       )
   )
   children
   (
       #(
       value:
           #switch($c.which_)
           #case 0 ( *($T1 *)&($c.storage_.data_) )
           #case 1 ( *($T2 *)&($c.storage_.data_) )
           #case 2 ( *($T3 *)&($c.storage_.data_) )
           #case 3 ( *($T4 *)&($c.storage_.data_) )
           #case 4 ( *($T5 *)&($c.storage_.data_) )
           #case 5 ( *($T6 *)&($c.storage_.data_) )
           #case 6 ( *($T7 *)&($c.storage_.data_) )
           #case 7 ( *($T8 *)&($c.storage_.data_) )
           #case 8 ( *($T9 *)&($c.storage_.data_) )
           #case 9 ( *($T10 *)&($c.storage_.data_) )
       )
   )
}

;-------------------------------------------------------------
; BOOST_VISUALIZER_START boost::ptr_container and boost::array
;
; Copyright William Buklis 2007. Use, modification and distribution are subject to
; the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt
; or copy at http://www.boost.org/LICENSE_1_0.txt)
;
; @guid     CDC4F187-4AE8-40f2-A1CA-4F5913BC2778
; @platform msvc-8, msvc-9
; @version  1.1
; @author   Bill Buklis
; @email    bill at pbjzone dot com
;
; Usage
; =====
;
; All of the following text must be placed in the autoexp.dat file.
; Usage is automatic. No extra code is required.
;
; The following containers are supported with these visualizers:
;	array
;	ptr_array
;	ptr_deque
;	ptr_list
;	ptr_map
;	ptr_multimap
;	ptr_set
;	ptr_multiset
;	ptr_vector
;
; All of these visualizers attempt to emulate their corresponding STL containers using
;	a pointer type. i.e. ptr_vector<T> displays equivalently to vector<T*>.
;
;------------------------------------------------------------------------------
;  boost::array
;------------------------------------------------------------------------------

boost::array<*,*>{
	preview( $c.elems )
	children
	(
	    #array
	    (
			expr:	$c.elems[$i],
			size :	$T2
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_array
;------------------------------------------------------------------------------

boost::ptr_array<*,*>{
	preview( ($T1**)$c.c_.elems )
	children
	(
	    #array
	    (
			expr:	($T1*)$c.c_.elems[$i],
			size :	$T2
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_vector
;------------------------------------------------------------------------------
boost::ptr_vector<*,*>{
	children
	(
	    #array
	    (
			expr: (($T1**)($c.c_._Myfirst))[$i],
			size :	$c.c_._Mylast-$c.c_._Myfirst
		)
	)

    preview
    (
        #(
			"[",
            $e.c_._Mylast - $e.c_._Myfirst,
            "](",

            #array
            (
				expr : 	(($T1**)($c.c_._Myfirst))[$i],
				size : 	$c.c_._Mylast-$c.c_._Myfirst
			),
			")"
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_map
;------------------------------------------------------------------------------

boost::ptr_map<*,*,*>{
	preview
	(
		#(
			"[",
			$e.c_._Mysize,
			"](",

			#tree
			(
				head : $c.c_._Myhead->_Parent,
				skip : $c.c_._Myhead,
				size : $c.c_._Mysize,
				left : _Left,
				right : _Right
			) : *(std::pair<$T1,$T2 *> *)&($e._Myval),

			")"
		)
	)
	children
	(
		#tree
		(
			head : $c.c_._Myhead->_Parent,
		    skip : $c.c_._Myhead,
		    size : $c.c_._Mysize,
		    left : _Left,
		    right : _Right
		) : *(std::pair<$T1,$T2 *> *)&($e._Myval)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_multimap
;------------------------------------------------------------------------------

boost::ptr_multimap<*,*,*>{
	preview
	(
		#(
			"[",
			$e.c_._Mysize,
			"](",

			#tree
			(
				head : $c.c_._Myhead->_Parent,
				skip : $c.c_._Myhead,
				size : $c.c_._Mysize,
				left : _Left,
				right : _Right
			) : *(std::pair<$T1,$T2 *> *)&($e._Myval),

			")"
		)
	)
	children
	(
		#tree
		(
			head : $c.c_._Myhead->_Parent,
		    skip : $c.c_._Myhead,
		    size : $c.c_._Mysize,
		    left : _Left,
		    right : _Right
		) : *(std::pair<$T1,$T2 *> *)&($e._Myval)
	)
}

boost::ptr_map_iterator<*,*,*>{
	preview
	(
		#( "(", $c.m_iterator._Ptr->_Myval.first, ",", ($T3) $c.m_iterator._Ptr->_Myval.second, ")"
		)
	)
	children
	(
		#(
			_ptr: $c.m_iterator._Ptr,
			first: $c.m_iterator._Ptr->_Myval.first,
			second: ($T3) $c.m_iterator._Ptr->_Myval.second
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_set
;------------------------------------------------------------------------------

boost::ptr_set<*,*,*>{
    preview
    (
		#(
			"[",
            $e.c_._Mysize ,
            "](",

            #tree
            (
				head : $c.c_._Myhead->_Parent,
				skip : $c.c_._Myhead,
				left : _Left,
				right : _Right,
				size  : $c.c_._Mysize
			) : ($T1*)$e._Myval,

			")"
		)
	)

	children
	(
		#tree
		(
			head : $c.c_._Myhead->_Parent,
			skip : $c.c_._Myhead,
			left : _Left,
			right : _Right,
			size  : $c.c_._Mysize
		) : ($T1*)$e._Myval
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_multiset
;------------------------------------------------------------------------------

boost::ptr_multiset<*,*,*>{
    preview
    (
		#(
			"[",
            $e.c_._Mysize ,
            "](",

            #tree
            (
				head : $c.c_._Myhead->_Parent,
				skip : $c.c_._Myhead,
				left : _Left,
				right : _Right,
				size  : $c.c_._Mysize
			) : ($T1*)$e._Myval,

			")"
		)
	)

	children
	(
		#tree
		(
			head : $c.c_._Myhead->_Parent,
			skip : $c.c_._Myhead,
			left : _Left,
			right : _Right,
			size  : $c.c_._Mysize
		) : ($T1*)$e._Myval
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_list
;------------------------------------------------------------------------------

boost::ptr_list<*,*>{

	children
	(
		#list
		(
			head : ($c.c_._Myhead->_Next),
			size : $c.c_._Mysize,
			next : _Next
		) : ($T1*)$e._Myval
	)

	preview
	(
		#(
			"[",
			$e._Mysize,
			"](",

			#list
			(
				head : $c.c_._Myhead->_Next,
				size : $c.c_._Mysize,
				next : _Next
			) : ($T1*)$e._Myval,

			")"
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_deque
;------------------------------------------------------------------------------

boost::ptr_deque<*,*>{
	children
	(
		#array
		(
			expr : ($T1*)($c.c_._Map[ (($i + $c.c_._Myoff) / $c.c_._EEN_DS) % $c.c_._Mapsize][($i + $c.c_._Myoff) % $c.c_._EEN_DS]),
			size : $c.c_._Mysize
		)
	)

	preview
	(
		#(
			"[",
			$e.c_._Mysize,
			"](",

			#array
			(
				expr : ($T1*)($c.c_._Map[ (($i + $c.c_._Myoff) / $c.c_._EEN_DS) % $c.c_._Mapsize][($i + $c.c_._Myoff) % $c.c_._EEN_DS]),
				size : $c.c_._Mysize
			),

			")"
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_vector::iterator (specialization of void_ptr_iterator)
;------------------------------------------------------------------------------
boost::void_ptr_iterator<std::_Vector_iterator<*>,*>|boost::void_ptr_iterator<std::_Vector_const_iterator<*>,*>{
	preview
	(
		#(
			($T2*)(*$c.iter_._Myptr)
		)
	)
	children
	(
		#(
			ptr: ($T2*)(*$c.iter_._Myptr)
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_deque::iterator (specialization of void_ptr_iterator)
;------------------------------------------------------------------------------
boost::void_ptr_iterator<std::_Deque_iterator<*,*,*>,*>|boost::void_ptr_iterator<std::_Deque_const_iterator<*,*,*>,*>{
   preview
   (
	   #if( $e.iter_._Myoff >= ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Myoff + ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Mysize)
	   (
	   		#("<end>")
	   )
	   #else(
			#(
				"deque[",
				$e.iter_._Myoff - ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Myoff,
				"] = ",
				($T4*)((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Map[ (($c.iter_._Myoff) / ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_EEN_DS) % ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Mapsize][$c.iter_._Myoff % ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_EEN_DS]
			)
		)
	)
	children
	(
	   #if( ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Myoff + ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Mysize > $e.iter_._Myoff)
	   (
			#(
				ptr: ($T4*)((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Map[ ($c.iter_._Myoff / ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_EEN_DS) % ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_Mapsize][$c.iter_._Myoff % ((std::deque<$T1,$T2 > *)$c.iter_._Mycont)->_EEN_DS]
			)
		)
	)
}

;------------------------------------------------------------------------------
;  boost::ptr_array::iterator (specialization of void_ptr_iterator)
;------------------------------------------------------------------------------
boost::void_ptr_iterator<void**,*>{
	preview
	(
		#( ($T3**) $e.iter_ )
	)

	children
	(
		#( ptr: *($T3**) $e.iter_ )
	)
}

;------------------------------------------------------------------------------
;  boost::void_ptr_iterator - used by ptr_set, ptr_multiset, ptr_list
;------------------------------------------------------------------------------
boost::void_ptr_iterator<*,*>{
	preview
	(
		#( ($T2*) $e.iter_._Ptr->_Myval)
	)

	children
	(
		#(ptr: ($T2*) $e.iter_._Ptr->_Myval)
	)
}

; BOOST_VISUALIZER_END boost::ptr_container and boost::array
;-----------------------------------------------------------