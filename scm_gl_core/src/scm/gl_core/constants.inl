
#include <cassert>

#include <boost/static_assert.hpp>

namespace scm {
namespace gl {

inline
int primitive_patch_control_points(primitive_topology t)
{
    static int cp_counts[] = {
        0,      // PRIMITIVE_POINT_LIST = 0x00,
        0,      // PRIMITIVE_LINE_LIST,
        0,      // PRIMITIVE_LINE_STRIP,
        0,      // PRIMITIVE_LINE_LOOP,
        0,      // PRIMITIVE_LINE_LIST_ADJACENCY,
        0,      // PRIMITIVE_LINE_STRIP_ADJACENCY,
        0,      // PRIMITIVE_TRIANGLE_LIST,
        0,      // PRIMITIVE_TRIANGLE_STRIP,
        0,      // PRIMITIVE_TRIANGLE_LIST_ADJACENCY,
        0       // PRIMITIVE_TRIANGLE_STRIP_ADJACENCY,
#if SCM_GL_CORE_BASE_OPENGL_VERSION >= SCM_GL_CORE_OPENGL_VERSION_400
        ,
        1,      // PRIMITIVE_PATCH_LIST_1_CONTROL_POINTS,
        2,      // PRIMITIVE_PATCH_LIST_2_CONTROL_POINTS,
        3,      // PRIMITIVE_PATCH_LIST_3_CONTROL_POINTS,
        4,      // PRIMITIVE_PATCH_LIST_4_CONTROL_POINTS,
        5,      // PRIMITIVE_PATCH_LIST_5_CONTROL_POINTS,
        6,      // PRIMITIVE_PATCH_LIST_6_CONTROL_POINTS,
        7,      // PRIMITIVE_PATCH_LIST_7_CONTROL_POINTS,
        8,      // PRIMITIVE_PATCH_LIST_8_CONTROL_POINTS,
        9,      // PRIMITIVE_PATCH_LIST_9_CONTROL_POINTS,
        10,     // PRIMITIVE_PATCH_LIST_10_CONTROL_POINTS,
        11,     // PRIMITIVE_PATCH_LIST_11_CONTROL_POINTS,
        12,     // PRIMITIVE_PATCH_LIST_12_CONTROL_POINTS,
        13,     // PRIMITIVE_PATCH_LIST_13_CONTROL_POINTS,
        14,     // PRIMITIVE_PATCH_LIST_14_CONTROL_POINTS,
        15,     // PRIMITIVE_PATCH_LIST_15_CONTROL_POINTS,
        16,     // PRIMITIVE_PATCH_LIST_16_CONTROL_POINTS,
        17,     // PRIMITIVE_PATCH_LIST_17_CONTROL_POINTS,
        18,     // PRIMITIVE_PATCH_LIST_18_CONTROL_POINTS,
        19,     // PRIMITIVE_PATCH_LIST_19_CONTROL_POINTS,
        20,     // PRIMITIVE_PATCH_LIST_20_CONTROL_POINTS,
        21,     // PRIMITIVE_PATCH_LIST_21_CONTROL_POINTS,
        22,     // PRIMITIVE_PATCH_LIST_22_CONTROL_POINTS,
        23,     // PRIMITIVE_PATCH_LIST_23_CONTROL_POINTS,
        24,     // PRIMITIVE_PATCH_LIST_24_CONTROL_POINTS,
        25,     // PRIMITIVE_PATCH_LIST_25_CONTROL_POINTS,
        26,     // PRIMITIVE_PATCH_LIST_26_CONTROL_POINTS,
        27,     // PRIMITIVE_PATCH_LIST_27_CONTROL_POINTS,
        28,     // PRIMITIVE_PATCH_LIST_28_CONTROL_POINTS,
        29,     // PRIMITIVE_PATCH_LIST_29_CONTROL_POINTS,
        30,     // PRIMITIVE_PATCH_LIST_30_CONTROL_POINTS,
        31,     // PRIMITIVE_PATCH_LIST_31_CONTROL_POINTS,
        32      // PRIMITIVE_PATCH_LIST_32_CONTROL_POINTS
#endif // SCM_GL_CORE_BASE_OPENGL_VERSION >= SCM_GL_CORE_OPENGL_VERSION_400
    };

#if SCM_GL_CORE_BASE_OPENGL_VERSION >= SCM_GL_CORE_OPENGL_VERSION_400
    BOOST_STATIC_ASSERT((PRIMITIVE_PATCH_LIST_32_CONTROL_POINTS - PRIMITIVE_PATCH_LIST_1_CONTROL_POINTS + 1) == 32);
#endif // SCM_GL_CORE_BASE_OPENGL_VERSION >= SCM_GL_CORE_OPENGL_VERSION_400

    BOOST_STATIC_ASSERT((sizeof(cp_counts) / sizeof(int)) == PRIMITIVE_TOPOLOGY_COUNT);

    assert(PRIMITIVE_POINT_LIST <= t && t < PRIMITIVE_TOPOLOGY_COUNT);

    return (cp_counts[t]);
}

} // namespace gl
} // namespace scm
