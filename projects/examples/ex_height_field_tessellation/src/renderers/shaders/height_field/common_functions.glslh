
#ifndef SCM_LDATA_HF_TESSELLATE_HEIGHT_FIELD_COMMON_FUNCTIONS_GLSLH_INCLUDED
#define SCM_LDATA_HF_TESSELLATE_HEIGHT_FIELD_COMMON_FUNCTIONS_GLSLH_INCLUDED

#include </scm/gl_util/camera_block.glsl>

#include </scm/data/height_field/common_uniforms.glslh>

vec2
clip_to_screen_space(in vec4 cs_vert_position)
{
    vec2 cs_screen_pos = cs_vert_position.xy / cs_vert_position.w;

    return (cs_screen_pos * 0.5 + 0.5) * screen_size;
}

vec2
object_to_screen_space(in vec4 os_vert_position)
{
    vec4 cs_pos = camera_transform.vp_matrix * model_matrix * os_vert_position;
    vec2 cs_screen_pos = cs_pos.xy / cs_pos.w;

    return (cs_screen_pos * 0.5 + 0.5) * screen_size;
}

bool
quad_patch_inside_frustum(in vec4 v0, in vec4 v1, in vec4 v2, in vec4 v3)
{
    vec3 cs_v0 = v0.xyz / v0.w;
    vec3 cs_v1 = v1.xyz / v1.w;
    vec3 cs_v2 = v2.xyz / v2.w;
    vec3 cs_v3 = v3.xyz / v3.w;

    const vec3 frustum_min = vec3(-1.0, -1.0, -1.0);
    const vec3 frustum_max = vec3( 1.0,  1.0,  1.0);
#if 1
    bvec4 vert_class_inside = bvec4(all(lessThan(cs_v0, frustum_max) && greaterThan(cs_v0, frustum_min)),
                                    all(lessThan(cs_v1, frustum_max) && greaterThan(cs_v1, frustum_min)),
                                    all(lessThan(cs_v2, frustum_max) && greaterThan(cs_v2, frustum_min)),
                                    all(lessThan(cs_v3, frustum_max) && greaterThan(cs_v3, frustum_min)));
    return any(vert_class_inside);
#else
    bool plane_out_class =    all(lessThan(vec4(cs_v0.x, cs_v1.x, cs_v2.x, cs_v3.x), vec4(frustum_min.x)))
                           || all(lessThan(vec4(cs_v0.y, cs_v1.y, cs_v2.y, cs_v3.y), vec4(frustum_min.y)))
                           || all(lessThan(vec4(cs_v0.z, cs_v1.z, cs_v2.z, cs_v3.z), vec4(frustum_min.z)))
                           || all(greaterThan(vec4(cs_v0.x, cs_v1.x, cs_v2.x, cs_v3.x), vec4(frustum_max.x)))
                           || all(greaterThan(vec4(cs_v0.y, cs_v1.y, cs_v2.y, cs_v3.y), vec4(frustum_max.y)))
                           || all(greaterThan(vec4(cs_v0.z, cs_v1.z, cs_v2.z, cs_v3.z), vec4(frustum_max.z)));

    return !plane_out_class;
#endif
}

bool
triangle_patch_inside_frustum(in vec4 v0, in vec4 v1, in vec4 v2)
{
    vec3 cs_v0 = v0.xyz / v0.w;
    vec3 cs_v1 = v1.xyz / v1.w;
    vec3 cs_v2 = v2.xyz / v2.w;

    const vec3 frustum_min = vec3(-1.0, -1.0, -1.0);
    const vec3 frustum_max = vec3( 1.0,  1.0,  1.0);

    bvec3 vert_class_inside = bvec3(all(lessThan(cs_v0, frustum_max) && greaterThan(cs_v0, frustum_min)),
                                    all(lessThan(cs_v1, frustum_max) && greaterThan(cs_v1, frustum_min)),
                                    all(lessThan(cs_v2, frustum_max) && greaterThan(cs_v2, frustum_min)));
    return any(vert_class_inside);
}

float
edge_tessellation_factor(in vec4 v1, in vec2 t1,
                         in vec4 v2, in vec2 t2)
{
    float screen_length = length(clip_to_screen_space(v1) - clip_to_screen_space(v2));

    float tess1 = texture(density_map, t1).r;
    float tess2 = texture(density_map, t2).r;

    return max((screen_length / pixel_tolerance) * mix(tess1, tess2, 0.5), 1.0);
}

vec3
height_map_gradient(in vec2      ts_position,
                    in sampler2D height_map,
                    in vec2      texel_offset)
{
    vec3 x = vec3(2.0 * texel_offset.x, 0.0, height_scale * texture(height_map, ts_position + vec2(texel_offset.x, 0.0)).r
                                           - height_scale * texture(height_map, ts_position - vec2(texel_offset.x, 0.0)).r);
    vec3 y = vec3(0.0, 2.0 * texel_offset.y, height_scale * texture(height_map, ts_position + vec2(0.0, texel_offset.y)).r
                                           - height_scale * texture(height_map, ts_position - vec2(0.0, texel_offset.y)).r);
    return cross(x, y);
}

#endif // SCM_LDATA_HF_TESSELLATE_HEIGHT_FIELD_COMMON_FUNCTIONS_GLSLH_INCLUDED
